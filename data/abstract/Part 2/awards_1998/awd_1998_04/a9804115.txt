Title       : Analysis-Based Program Transformation
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : May 17,  2000       
File        : a9804115

Award Number: 9804115
Award Instr.: Continuing grant                             
Prgm Manager:                                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  1998  
Expires     : August 31,  2002     (Estimated)
Expected
Total Amt.  : $299885             (Estimated)
Investigator: Mitchell Wand wand@ccs.neu.edu  (Principal Investigator current)
Sponsor     : Northeastern University
	      360 Huntington Avenue
	      Boston, MA  021155096    617/373-5600

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9216,HPCC,
Abstract    :
              CCR-9804115  This project seeks to understand how a program analysis justifies 
              the program transformation that is typically based upon it. Many  interesting
              optimizations depend on interprocedural analyses,  which collect information
              about program units larger than a  single procedure. Such optimizations are
              widespread in higher-  order languages such as Scheme or ML, and play an
              important role  in ordinary imperative languages as well. Despite decades of
              work  on abstract interpretation and related analysis frameworks, there  are
              still very few examples in which an analysis is actually used  to prove the
              correctness of an associated transformation. This  project seeks to fill this 
              gap by doing a series of examples related to the compilation of  higher-order
              ``almost-functional'' languages like Scheme or ML.  It also seeks to unify
              analysis-based transformations with the  theory of transformations based on
              contextual equivalence, and to  extend all of this theory to embrace programs
              that compute in  parallel or distributed settings.***
