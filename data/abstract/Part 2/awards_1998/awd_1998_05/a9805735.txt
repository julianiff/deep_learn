Title       : CISE PostDoc: Beyond Finite State Model Checking in LMC
Type        : Award
NSF Org     : EIA 
Latest
Amendment
Date        : March 24,  1998     
File        : a9805735

Award Number: 9805735
Award Instr.: Standard Grant                               
Prgm Manager: Kenneth C. Whang                        
	      EIA  DIVISION OF EXPERIMENTAL & INTEG ACTIVIT
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  1998  
Expires     : August 31,  2001     (Estimated)
Expected
Total Amt.  : $66000              (Estimated)
Investigator: C. R. Ramakrishnan cram@cs.sunysb.edu  (Principal Investigator current)
Sponsor     : SUNY Stony Brook
	      
	      Stony Brook, NY  117943362    631/632-9949

NSF Program : 2885      CISE RESEARCH INFRASTRUCTURE
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9192,9218,HPCC,
Abstract    :
              9805735  Ramakrishnan, C. R.  Ramakrishnan, I.V.  Smolka, Scott, A.  Warren,
              David, S.  SUNY at Stony Brook    CISE PostDoc: Beyond Finite State Model
              Checking in LMC    Model checking is a key emerging technique for verifying
              properties of concurrent systems.  The primary objective of the LMC
              (Logic-Based Model Checking) project is to build succinct and efficient model
              checkers based on the latest advances in concurrency research and tabled logic
              programming. Initial results include a model checker for value-passing CCS (a
              language for specifying concurrent systems) and the modal mu-calculus (an
              expressive temporal logic), written in less than 200 lines of tabled Prolog
              code, with performance comparable to that of other contemporary systems.  The
              LMC project has, until now, focused on model checking finite-state systems.   
              The Postdoctoral Candidate supported by the current project will expand the
              scope of the LMC project by using the power and versatility of constraint
              tabled logic programming to verify infinite-state systems.  For instance,
              representing sets of states by constraints permits use of case-based reasoning
              for finitely verifying certain infinite-state systems.  Moreover, programming
              with constraints and tables facilitates tighter integration of deductive
              strategies, such as induction, with algorithmic model checking. The resulting
              technology will permit verification of an infinite family of systems (e.g. a
              protocol with N participants, for any N), without having to verify each
              instance separately.
