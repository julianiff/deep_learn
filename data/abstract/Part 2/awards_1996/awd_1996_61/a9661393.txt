Title       : SBIR Phase I: Genetic Algorithms for Software Test Data Generation
Type        : Award
NSF Org     : DMI 
Latest
Amendment
Date        : November 26,  1996  
File        : a9661393

Award Number: 9661393
Award Instr.: Standard Grant                               
Prgm Manager: Sara B. Nerlove                         
	      DMI  DIV OF DESIGN,MANUFAC & INDUSTRIAL INNOV
	      ENG  DIRECTORATE FOR ENGINEERING             
Start Date  : January 1,  1997    
Expires     : June 30,  1997       (Estimated)
Expected
Total Amt.  : $74434              (Estimated)
Investigator: Gary E. McGraw   (Principal Investigator current)
Sponsor     : Reliable Software Tech
	      21515 Ridgetop Circle, Suite 250
	      Sterling, VA  20166    703/404-9293

NSF Program : 5371      SMALL BUSINESS PHASE I
Fld Applictn: 0000912   Computer Science                        
Program Ref : 2865,9216,HPCC,
Abstract    :
              ***  9661393  McGraw     This Small Business Innovative Research Phase I project
              is to do Dynamic test data generation to reduce test generation problems to a
              simpler problem of function minimization and explore a promising approach to
              the problem of finding test inputs that satisfy complex constraints. Genetic
              algorithms to perform this function minimization will be used in place of the
              simple gradient-descent method that is currently used.  Also, the application
              of dynamic software analysis to the problem of deciding which program execution
              path will allow the constraints to be satisfied most easily will be
              investigated.  In software testing, it is often desirable to find test inputs
              that exercise specific program features. To find these inputs by hand is
              extremely time-consuming, especially when the software is complex. Therefore,
              numerous attempts have been made to automate the process.  Random test data
              generation consists of generating test inputs at random. But when the desired
              inputs must satisfy complex constraints, a random approach is unlikely to
              succeed. Symbolic test data generation executes parts of the software
              symbolically, constructing an algebraic description of the constraints that an
              input must satisfy in order to exercise the desired feature. But this method
              falters when certain programming constructs are encountered.   The potential
              benefactors of the research include the following industries: aviation,
              defense, nuclear, telecommunications, medical, pharmaceutical, transportation,
              and personal computer software.  ***
