Title       : Efficient Implementation of Dynamic Parallel Programs
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 13,  1997    
File        : a9523253

Award Number: 9523253
Award Instr.: Standard Grant                               
Prgm Manager: Mukesh Singhal                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  1996  
Expires     : August 31,  1998     (Estimated)
Expected
Total Amt.  : $149747             (Estimated)
Investigator: Gul A. Agha agha@cs.uiuc.edu  (Principal Investigator current)
Sponsor     : U of Ill Urbana-Champaign
	      801 South Wright Street
	      Champaign, IL  61820    217/333-2186

NSF Program : 2876      OPER SYSTEMS AND COMPILERS
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 2891,9216,HPCC,
Abstract    :
              The project is studying the feasibility of using high level  programming
              constructs which directly express the parallelism in  an algorithm.  Although
              parallelizing compilers for sequential  programming languages provide good
              results for some numerical  codes, namely those with regular communication
              patterns, such  compilers are not effective in extracting parallelism in
              dynamic  programs.  The methodology used in this project is to express a 
              computation as a collection of encapsulated, asynchronous fine-  grained
              objects, or actors, which interact by sending each other  messages.  The
              project is studying ways of reducing the costs  associated with managing
              fine-grained objects and messages.  Moreover, because efficient execution on
              concurrent computer  architectures also requires architecture-specific
              placement (and  migration) strategies, the project is studying methods to allow
               code for placement to be independently expressed and combined  with code for
              the logical operations in an algorithm.  The  advantage of such a separation is
              to allow portability of the  algorithmic code across a wide range of concurrent
              architectures.  ***
