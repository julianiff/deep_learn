Title       : Software Evolution and Interleaving
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : June 17,  1998      
File        : a9708913

Award Number: 9708913
Award Instr.: Continuing grant                             
Prgm Manager: Frank D. Anger                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : August 1,  1997     
Expires     : July 31,  1999       (Estimated)
Expected
Total Amt.  : $160000             (Estimated)
Investigator: Jon Spencer Rugaber spencer@cc.gatech.edu  (Principal Investigator current)
              Linda M. Wills  (Co-Principal Investigator current)
Sponsor     : GA Tech Res Corp - GIT
	      Office of Sponsored Programs
	      Atlanta, GA  303320420    404/385-0866

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9216,HPCC,
Abstract    :
              9708913  Complex, evolved software is constructed from a tight-knit  composition
              of computational structures, called strands, each  of which is responsible for
              achieving some requirement, goal,  or subset of system functionality. Program
              strands are  interwoven and sometimes even merged in order to share  resources.
              This phenomenon is called interleaving, and  understanding how interleaved
              strands compose is the purpose of  the proposed work. There are two key
              objectives to the  research: to formulate a rigorous characterization of the 
              compositional relationships among interleaved strands and to  design a new
              representation for expressing their composition.  To form a rigorous
              characterization, a case study of an  existing corpus of software will be
              performed in which  interleaving of design patterns will be investigated and 
              compositional mechanisms will be classified. Existing  formalisms for
              representing strands and their relationships  will be surveyed and extended to
              create a new formalism that  expresses strand composition. The understanding
              gained will  suggest what types of documentation, programming language 
              features, and design abstractions are needed to enable  software engineers to
              make interleaving decisions explicit.  This will alert future maintainers of
              interleaved software to  the fact that the interleaving was intentionally
              introduced and  mitigate problems with understanding it.  ***
