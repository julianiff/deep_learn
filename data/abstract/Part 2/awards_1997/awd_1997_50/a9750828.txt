Title       : A Pedagogical Laboratory for Object-Oriented Programming
Type        : Award
NSF Org     : DUE 
Latest
Amendment
Date        : May 20,  1997       
File        : a9750828

Award Number: 9750828
Award Instr.: Standard Grant                               
Prgm Manager: Lillian N. Cassel                       
	      DUE  DIVISION OF UNDERGRADUATE EDUCATION     
	      EHR  DIRECT FOR EDUCATION AND HUMAN RESOURCES
Start Date  : August 1,  1997     
Expires     : July 31,  1999       (Estimated)
Expected
Total Amt.  : $20304              (Estimated)
Investigator: Stuart H. Rubin rubin@cps.cmich.edu  (Principal Investigator current)
              Roger Y. Lee  (Co-Principal Investigator current)
Sponsor     : Central Michigan U
	      Office of Research
	      Mount Pleasant, MI  48859    989/774-6777

NSF Program : 7400      UNDERGRAD INSTRM & LAB IMPROVE
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9178,9267,SMET,
Abstract    :
              A teaching laboratory for object-oriented programming is being developed for
              software engineering students.  It is being used to teach a team approach to
              software development.  Rather than emphasizing software engineering management,
              the project is giving students the opportunity to develop a large software
              project using the Scheme language.  This Lisp dialect enables them to leverage
              at least a 500 percent improvement in productivity. Using this language, they
              are more able to learn how to manage large-scale industrial software projects. 
                In particular, students are receiving instruction in the areas of functional
              decomposition, optimization, random-basis testing, retrieval for reuse, and
              expert language translation.  In the area of functional decomposition, students
              are learning how to decompose a complex software problem into manageable pieces
              and distribute the work across a team.  They are learning, through the study of
              transformational programming, how to apply knowledge bases to optimize the code
              resulting from specifications. Students are also being taught how to reuse
              software (e.g., C++ and Scheme) using functional programming and
              knowledge-based transformation.  Finally, students are being taught how to
              build interoperable software through the construction of prototype translators
              that translate between Scheme and Lisp or Scheme and a simple subset of C++.  *
