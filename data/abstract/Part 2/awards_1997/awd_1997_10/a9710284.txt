Title       : Advanced ZPL Compiler
Type        : Award
NSF Org     : EIA 
Latest
Amendment
Date        : September 18,  1997 
File        : a9710284

Award Number: 9710284
Award Instr.: Standard Grant                               
Prgm Manager: Anthony B. Maddox                       
	      EIA  DIVISION OF EXPERIMENTAL & INTEG ACTIVIT
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 15,  1997 
Expires     : August 31,  1998     (Estimated)
Expected
Total Amt.  : $82000              (Estimated)
Investigator: Lawrence Snyder snyder@cs.washington.edu  (Principal Investigator current)
Sponsor     : U of Washington
	      3935 University Way NE
	      Seattle, WA  981056613    206/543-4043

NSF Program : 4725      EXPERIMENTAL SYSTEMS PROGRAM
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 9216,HPCC,
Abstract    :
              This research project is directed at the design and detailed  specification of
              the Advanced ZPL language in anticipation  of its full experimental evaluation.
               Advanced ZPL is intended  as the programming language for scientific and
              engineering  computations that are to be run on parallel supercomputers. 
              Unlike ZPL (and other antecedent data parallel languages)  Advanced ZPL is
              suitable for general parallel algorithms.  Advanced ZPL contains ZPL as a
              proper subset, giving it full  support for data parallel computation.  In
              addition, Advanced  ZPL provides the capability to express thread parallelism, 
              task parallelism and pipelining.  ZPL provides array data  structures, while
              Advanced ZPL adds general data structuring  capabilities.  Control over data
              motion and computational  granularity are provided.  The goal is to produce a
              precise specification with which  to write sample applications. Based on these
              applications  users can assess the convenience and expressivity of  Advanced
              ZPL, and compiler writers can formulate ways to  produce efficient, portable
              code for it.
