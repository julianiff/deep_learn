Title       : CAREER: Tractable Formal Methods for the Synthesis of Concurrent Programs
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : April 8,  1999      
File        : a9702616

Award Number: 9702616
Award Instr.: Continuing grant                             
Prgm Manager: Frank D. Anger                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : May 1,  1997        
Expires     : April 30,  2001      (Estimated)
Expected
Total Amt.  : $200000             (Estimated)
Investigator: Paul C. Attie   (Principal Investigator current)
Sponsor     : Florida International Univ
	      11200 SW 8th Street
	      Miami, FL  33199    305/554-2000

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
Program Ref : 1045,9216,HPCC,
Abstract    :
              9702616  The problem of developing concurrent programs from formal 
              specifications is addressed. Concurrent programs consist of  a set of
              interacting components each running on a single  computer.  A formal
              specification states precisely the  correct behavior required of the program.
              The project  investigates automatic program synthesis: given a formal 
              specification, the synthesis method automatically produces a  correct program.
              Synthesis obviates the need to manually  compose a program and manually
              construct a proof of its  correctness. A serious drawback of previous synthesis
               methods is that they are too inefficient to generate any but  the smallest
              programs. The objective is to produce synthesis  methods sufficiently efficient
              to synthesize large  concurrent programs. The approach taken uses "pairwise 
              analysis."  Previous approaches considered all program  components
              simultaneously, requiring the analysis of a very  large number of combined
              behaviors. This research looks only  at pairs of components at any one time,
              greatly reducing the  analytical burden. Almost all large, practical programs
              are  concurrent; the interaction among their many independent  components is
              very difficult to design properly. The  significance and impact of this
              research is that it will  eventually provide conceptual tools to help
              programmers  create such programs and analyze whether their behavior  conforms
              to the program specification.  ***
